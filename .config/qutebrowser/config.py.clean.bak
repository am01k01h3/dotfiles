import dracula.draw

dracula.draw.blood(c, {
    'spacing': {
        'vertical': 6,
        'horizontal': 8
    }
})

#Load existing settings made via :set
config.load_autoconfig()

# Uncomment this to still load settings configured via autoconfig.yml
#config.load_autoconfig()

# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
#c.aliases = {
#    "q": "quit",
#    "w": "session-save",
#    "wq": "quit --save",
#    "x": "quit --save",
#    "o": "open",
#}


# Bindings for normal mode
config.bind("<Ctrl+Shift+Tab>", "tab-prev")
config.bind("<Ctrl+Tab>", "tab-next")
config.bind("<Backspace>", "back")
config.bind("<Alt+Left>", "back")
config.bind("<Alt+Right>", "forward")
config.bind("<", "tab-move -")
config.bind(">", "tab-move +")
config.bind("<Ctrl+d>", "bookmark-add")
config.bind("<Ctrl+=>", "zoom-in")
config.bind("<Ctrl+->", "zoom-out")
#config.bind("<Ctrl+e>", "open-editor")
config.bind("D", "quickmark-save")
#config.bind("m", "spawn --detach /home/victor/bin/mpv_queue {url}")
#config.bind("M", "hint links spawn --detach /home/victor/bin/mpv_queue {hint-url}")
#config.bind("j", "scroll-px 0 75")
#config.bind("k", "scroll-px 0 -75")
#config.bind("xx", "config-cycle tabs.show multiple switching ;; fullscreen")



# Load a restored tab as soon as it takes focus.
# Type: Bool
c.session.lazy_restore = False

# Additional arguments to pass to Qt, without leading `--`. With
# QtWebEngine, some Chromium arguments (see
# https://peter.sh/experiments/chromium-command-line-switches/ for a
# list) will work.
# Type: List of String
# c.qt.args = ["ppapi-widevine-path=/usr/lib/qt/plugins/ppapi/libwidevinecdmadapter.so"]

# Always restore open sites when qutebrowser is reopened.
# Type: Bool
c.auto_save.session = True

# Automatically start playing `<video>` elements. Note: On Qt < 5.11,
# this option needs a restart and does not support URL patterns.
# Type: Bool
# c.content.autoplay = False

# Which cookies to accept.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
c.content.cookies.accept = "all"

# Store cookies. Note this option needs a restart with QtWebEngine on Qt
# < 5.9.
# Type: Bool
#c.content.cookies.store = False

# Default encoding to use for websites. The encoding must be a string
# describing an encoding such as _utf-8_, _iso-8859-1_, etc.
# Type: String
c.content.default_encoding = "utf-8"

# User agent to send. Unset to send the default. Note that the value
# read from JavaScript is always the global value.
# Type: String
# c.content.headers.user_agent = None

# Enable JavaScript.
# Type: Bool
c.content.javascript.enabled = True
#c.content.javascript.enabled = False

# Number of commands to save in the command history. 0: no history / -1:
# unlimited
# Type: Int
c.completion.cmd_history_max_items = 500

# Height (in pixels or as percentage of the window) of the completion.
# Type: PercOrInt
c.completion.height = "40%"

# Width (in pixels) of the scrollbar in the completion window.
# Type: Int
c.completion.scrollbar.width = 12

# Format of timestamps (e.g. for the history completion).
# Type: TimestampTemplate
c.completion.timestamp_format = "%Y-%m-%d %H:%M"

# Directory to save downloads to. If unset, a sensible OS-specific
# default is used.
# Type: Directory
#c.downloads.location.directory = "/home/victor"

# Where to show the downloaded files.
# Type: VerticalPosition
# Valid values:
#   - top
#   - bottom
c.downloads.position = "bottom"

# Editor (and arguments) to use for the `open-editor` command. The
# following placeholders are defined: * `{file}`: Filename of the file
# to be edited. * `{line}`: Line in which the caret is found in the
# text. * `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
c.editor.command = ["alacritty", "-e", "'vim {file}'"]

# Characters used for hint strings.
# Type: UniqueCharString
#c.hints.chars = "qsdfghjkl"

# When to show the scrollbar.
# Type: String
# Valid values:
#   - always: Always show the scrollbar.
#   - never: Never show the scrollbar.
#   - when-searching: Show the scrollbar when searching for text in the webpage. With the QtWebKit backend, this is equal to `never`.
#c.scrolling.bar = "when-searching"

# Enable smooth scrolling for web pages. Note smooth scrolling does not
# work with the `:scroll-px` command.
# Type: Bool
c.scrolling.smooth = True

# Hide the statusbar unless a message is shown.
# Type: Bool
c.statusbar.hide = False

#c.statusbar.position = "top"
c.statusbar.position = "bottom"

# List of widgets displayed in the statusbar.
# Type: List of String
# Valid values:
#   - url: Current page URL.
#   - scroll: Percentage of the current page position like `10%`.
#   - scroll_raw: Raw percentage of the current page position like `10`.
#   - history: Display an arrow when possible to go back/forward in history.
#   - tabs: Current active tab, e.g. `2`.
#   - keypress: Display pressed keys when composing a vi command.
#   - progress: Progress bar for the current page loading.
#c.statusbar.widgets = ["keypress", "progress", "url", "scroll"]
#c.statusbar.widgets = ["keypress", "progress", "url", "history", "scroll", "tabs", ]
#c.statusbar.widgets = ["keypress", "progress", "history", "url", "scroll", "tabs", ]

# Open new tabs (middleclick/ctrl+click) in the background.
# Type: Bool
c.tabs.background = True

# How to behave when the last tab is closed.
# Type: String
# Valid values:
#   - ignore: Don't do anything.
#   - blank: Load a blank page.
#   - startpage: Load the start page.
#   - default-page: Load the default page.
#   - close: Close the window.
c.tabs.last_close = "default-page"

# Switch between tabs using the mouse wheel.
# Type: Bool
c.tabs.mousewheel_switching = False

# Position of the tab bar.
# Type: Position
# Valid values:
#   - top
#   - bottom
#   - left
#   - right
c.tabs.position = "top"

# Which tab to select when the focused tab is removed.
# Type: SelectOnRemove
# Valid values:
#   - prev: Select the tab which came before the closed one (left in horizontal, above in vertical).
#   - next: Select the tab which came after the closed one (right in horizontal, below in vertical).
#   - last-used: Select the previously selected tab.
c.tabs.select_on_remove = "next"

# When to show the tab bar.
# Type: String
# Valid values:
#   - always: Always show the tab bar.
#   - never: Always hide the tab bar.
#   - multiple: Hide the tab bar if only one tab is open.
#   - switching: Show the tab bar when switching tabs.
c.tabs.show = "multiple"

# Format to use for the tab title. The following placeholders are
# defined:  * `{perc}`: Percentage as a string like `[10%]`. *
# `{perc_raw}`: Raw percentage, e.g. `10`. * `{title}`: Title of the
# current web page. * `{title_sep}`: The string ` - ` if a title is set,
# empty otherwise. * `{index}`: Index of this tab. * `{id}`: Internal
# tab ID of this tab. * `{scroll_pos}`: Page scroll position. *
# `{host}`: Host of the current web page. * `{backend}`: Either
# ''webkit'' or ''webengine'' * `{private}`: Indicates when private mode
# is enabled. * `{current_url}`: URL of the current web page. *
# `{protocol}`: Protocol (http/https/...) of the current web page. *
# `{audio}`: Indicator for audio/mute status.
# Type: FormatString
#c.tabs.title.format = "{audio} {current_title}"

# Width (in pixels or as percentage of the window) of the tab bar if
# it's vertical.
# Type: PercOrInt
c.tabs.width = "15%"


# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
#c.url.default_page = "file:///home/victor/dotfiles/homepage/.config/homepage/index.html"

# Open base URL of the searchengine if a searchengine shortcut is
# invoked without parameters.
# Type: Bool
#c.url.open_base_url = False

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
#c.url.searchengines = {
#    "DEFAULT": "https://www.startpage.com/do/dsearch?query={}",
#    "g": "https://www.google.fr/search?q={}",
#    "r": "https://reddit.com/r/{}",
#    "w": "https://en.wikipedia.org/w/index.php?search={}",
#    "wf": "https://fr.wikipedia.org/w/index.php?search={}",
#    "gt": "https://translate.google.com/#auto/fr/{}",
#    "gh": "https://github.com/search?q={}",
#    "al": "https://wiki.archlinux.org/index.php/{}",
#    "alf": "https://wiki.archlinux.fr/{}",
#    "aur": "https://aur.archlinux.org/packages/?K={}",
#    "yt": "https://www.youtube.com/results?search_query={}",
#    "maps": "https://www.google.fr/maps?q={}",
#    "gol": "https://golang.org/pkg/{}/",
#}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
#c.url.start_pages = "file:///home/victor/dotfiles/homepage/.config/homepage/index.html"

# Background color of the completion widget for odd rows.
# Type: QssColor
#c.colors.completion.odd.bg = "#151515"

# Background color of the completion widget for even rows.
# Type: QssColor
#c.colors.completion.even.bg = "#0C0C0C"

# Background color of the completion widget category headers.
# Type: QssColor
#c.colors.completion.category.bg = "#151515"

# Foreground color of the selected completion item.
# Type: QtColor
#c.colors.completion.item.selected.fg = "white"

# Background color of the selected completion item.
# Type: QssColor
#c.colors.completion.item.selected.bg = "#404040"

# Top border color of the completion widget category headers.
# Type: QssColor
#c.colors.completion.item.selected.border.top = "#000000"

# Bottom border color of the selected completion item.
# Type: QssColor
#c.colors.completion.item.selected.border.bottom = "#000000"

# Foreground color of the matched text in the completion.
# Type: QssColor
#c.colors.completion.match.fg = "#CC1111"

# Font color for hints.
# Type: QssColor
#c.colors.hints.fg = "white"

# Background color for hints. Note that you can use a `rgba(...)` value
# for transparency.
# Type: QssColor
#c.colors.hints.bg = "black"

# Font color for the matched part of hints.
# Type: QssColor
#c.colors.hints.match.fg = "red"

# Background color of the tab bar.
# Type: QtColor
#c.colors.tabs.bar.bg = "#000000"

# Foreground color of unselected odd tabs.
# Type: QtColor
#c.colors.tabs.odd.fg = "#808080"

# Background color of unselected odd tabs.
# Type: QtColor
#c.colors.tabs.odd.bg = "#151515"

# Foreground color of unselected even tabs.
# Type: QtColor
#c.colors.tabs.even.fg = "#808080"

# Background color of unselected even tabs.
# Type: QtColor
#c.colors.tabs.even.bg = "#0C0C0C"

# Foreground color of selected odd tabs.
# Type: QtColor
#c.colors.tabs.selected.odd.fg = "white"

# Background color of selected odd tabs.
# Type: QtColor
#c.colors.tabs.selected.odd.bg = "#404040"

# Foreground color of selected even tabs.
# Type: QtColor
#c.colors.tabs.selected.even.fg = "white"

# Background color of selected even tabs.
# Type: QtColor
#c.colors.tabs.selected.even.bg = "#404040"

# Background color for webpages if unset (or empty to use the theme's
# color).
# Type: QtColor
#c.colors.webpage.bg = "white"

#c.colors.webpage.prefers_color_scheme_dark = True

# Default monospace fonts. Whenever "monospace" is used in a font
# setting, it's replaced with the fonts listed here.
# Type: Font
# c.fonts.monospace = "Input Mono Condensed"
#c.fonts.default_family = ["Input Mono Condensed"]

# Font used in the completion widget.
# Type: Font
#c.fonts.completion.entry = "10pt monospace"

# Font used for prompts.
# Type: Font
#c.fonts.prompts = "Input Mono Condensed"

# Font family for standard fonts.
# Type: FontFamily
#c.fonts.web.family.standard = "monospace"

# Font family for fixed fonts.
# Type: FontFamily
#c.fonts.web.family.fixed = "monospace"

# Font family for serif fonts.
# Type: FontFamily
#c.fonts.web.family.serif = "monospace"

# Font family for sans-serif fonts.
# Type: FontFamily
#c.fonts.web.family.sans_serif = "monospace"

# Font family for cursive fonts.
# Type: FontFamily
#c.fonts.web.family.cursive = "monospace"

# Font family for fantasy fonts.
# Type: FontFamily
#c.fonts.web.family.fantasy = "monospace"

# Default font size (in pixels) for regular text.
# Type: Int
#c.fonts.web.size.default = 14

# Default font size (in pixels) for fixed-pitch text.
# Type: Int
#c.fonts.web.size.default_fixed = 11

#config.source('nord-qutebrowser.py')

